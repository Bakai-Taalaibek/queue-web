var $eFUWm$react = require("react");
var $eFUWm$proptypes = require("prop-types");
var $eFUWm$styledcomponents = require("styled-components");

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$defineInteropFlag(a) {
  Object.defineProperty(a, '__esModule', {value: true, configurable: true});
}
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

$parcel$defineInteropFlag(module.exports);

$parcel$export(module.exports, "default", () => $ef99b842007faef5$export$2e2bcd8739ae039);


var $dec34e73adcd5d3b$exports = {};
// Array.fill() is not supported by IE. This Polyfill fixes that problem.
if (!Array.prototype.fill) Object.defineProperty(Array.prototype, "fill", {
    value: function(value) {
        // Steps 1-2.
        if (this == null) throw new TypeError("this is null or not defined");
        var O = Object(this);
        // Steps 3-5.
        var len = O.length >>> 0;
        // Steps 6-7.
        var start = arguments[1];
        var relativeStart = start >> 0;
        // Step 8.
        var k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);
        // Steps 9-10.
        var end = arguments[2];
        var relativeEnd = end === undefined ? len : end >> 0;
        // Step 11.
        var finalValue = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len);
        // Step 12.
        while(k < finalValue){
            O[k] = value;
            k++;
        }
        // Step 13.
        return O;
    }
});





const $b0601b235983fedb$var$Input = (0, ($parcel$interopDefault($eFUWm$styledcomponents))).input`
  justify-content: space-between;
  width: 45px;
  height: 45px;
  margin: 5px;
  border-radius: 5px;
  text-align: center;
  font-size: 34px;
  font-family: -apple-system, system-ui, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue',
    Arial sans-serif;
`;
const $b0601b235983fedb$var$InputBox = ({ type: type , handleKeyDown: handleKeyDown , handleChange: handleChange , handleFocus: handleFocus , handleOnPaste: handleOnPaste , name: name , inputRef: inputRef , inputProps: inputProps  })=>{
    return /*#__PURE__*/ (0, ($parcel$interopDefault($eFUWm$react))).createElement($b0601b235983fedb$var$Input, {
        ...inputProps,
        type: type,
        onKeyDown: handleKeyDown,
        onChange: handleChange,
        onFocus: handleFocus,
        onPaste: handleOnPaste,
        maxLength: "1",
        name: name,
        ref: inputRef
    });
};
$b0601b235983fedb$var$InputBox.propTypes = {
    name: (0, ($parcel$interopDefault($eFUWm$proptypes))).string.isRequired,
    type: (0, ($parcel$interopDefault($eFUWm$proptypes))).string,
    handleKeyDown: (0, ($parcel$interopDefault($eFUWm$proptypes))).func,
    handleFocus: (0, ($parcel$interopDefault($eFUWm$proptypes))).func,
    handleOnPaste: (0, ($parcel$interopDefault($eFUWm$proptypes))).func,
    handleChange: (0, ($parcel$interopDefault($eFUWm$proptypes))).func,
    inputRef: (0, ($parcel$interopDefault($eFUWm$proptypes))).func,
    inputProps: (0, ($parcel$interopDefault($eFUWm$proptypes))).object
};
var $b0601b235983fedb$export$2e2bcd8739ae039 = $b0601b235983fedb$var$InputBox;


class $ef99b842007faef5$var$ReactIndividualCharacterInputBoxes extends (0, $eFUWm$react.Component) {
    constructor(props){
        super(props);
        this.state = {
            characterArray: Array(props.amount).fill(null)
        };
        this.handleKeyDown = this.handleKeyDown.bind(this);
        this.handleFocus = this.handleFocus.bind(this);
        this.handleChange = this.handleChange.bind(this);
        this.handleOnPaste = this.handleOnPaste.bind(this);
        this.inputElements = {};
        0, (/*@__PURE__*/$parcel$interopDefault($dec34e73adcd5d3b$exports));
    }
    componentDidMount() {
        if (this.props.autoFocus) this.inputElements["input0"].select();
    }
    shouldComponentUpdate(nextProps) {
        if (this.props.amount !== nextProps.amount || this.props.inputRegExp !== nextProps.inputRegExp) return true;
        return false;
    }
    renderItems() {
        let items = [];
        let inputProps = this.props.inputProps || {};
        for(var i = 0; i < this.props.amount; i++)items.push(/*#__PURE__*/ (0, ($parcel$interopDefault($eFUWm$react))).createElement((0, $b0601b235983fedb$export$2e2bcd8739ae039), {
            type: this.props.password ? "password" : "text",
            key: i,
            handleKeyDown: this.handleKeyDown,
            handleFocus: this.handleFocus,
            handleChange: this.handleChange,
            handleOnPaste: this.handleOnPaste,
            name: "input" + i,
            inputProps: inputProps[i] || inputProps,
            inputRef: (el)=>{
                if (!el) return;
                this.inputElements[el.name] = el;
            }
        }));
        return items;
    }
    render() {
        return /*#__PURE__*/ (0, ($parcel$interopDefault($eFUWm$react))).createElement("div", null, /*#__PURE__*/ (0, ($parcel$interopDefault($eFUWm$react))).createElement("div", null, this.renderItems()));
    }
    handleChange({ target: target  }) {
        if (target.value.match(this.props.inputRegExp)) {
            this.focusNextChar(target);
            this.setModuleOutput(target);
        } else target.value = this.state.characterArray[target.name.replace("input", "")];
    }
    handleKeyDown({ target: target , key: key  }) {
        if (key === "Backspace") {
            if (target.value === "" && target.previousElementSibling !== null) {
                target.previousElementSibling.value = "";
                this.focusPrevChar(target);
            } else target.value = "";
            this.setModuleOutput(target);
        } else if (key === "ArrowLeft") this.focusPrevChar(target);
        else if (key === "ArrowRight" || key === " ") this.focusNextChar(target);
    }
    handleFocus({ target: target  }) {
        var el = target;
        // In most browsers .select() does not work without the added timeout.
        setTimeout(function() {
            el.select();
        }, 0);
    }
    handleOnPaste(event) {
        event.preventDefault();
        const pasted = event.clipboardData.getData("text/plain");
        let pastedArray = pasted.split("").slice(0, this.props.amount);
        for(var i = 0; i < pastedArray.length; i++){
            if (pastedArray[i].match(this.props.inputRegExp)) this.inputElements["input" + i].value = pastedArray[i];
            else break;
        }
        if (i <= this.props.amount - 1) this.inputElements["input" + i].focus();
        else this.inputElements["input" + (this.props.amount - 1)].focus();
        this.setModuleOutput();
    }
    focusPrevChar(target) {
        if (target.previousElementSibling !== null) target.previousElementSibling.focus();
    }
    focusNextChar(target) {
        if (target.nextElementSibling !== null) target.nextElementSibling.focus();
    }
    setModuleOutput() {
        this.setState((prevState)=>{
            let updatedCharacters = prevState.characterArray.map((character, number)=>{
                return this.inputElements["input" + number].value;
            });
            return {
                characterArray: updatedCharacters
            };
        }, ()=>this.props.handleOutputString(this.state.characterArray.join("")));
    }
}
$ef99b842007faef5$var$ReactIndividualCharacterInputBoxes.defaultProps = {
    amount: 5,
    autoFocus: false,
    inputRegExp: /^[0-9]$/,
    password: false
};
$ef99b842007faef5$var$ReactIndividualCharacterInputBoxes.propTypes = {
    amount: (0, ($parcel$interopDefault($eFUWm$proptypes))).number,
    autoFocus: (0, ($parcel$interopDefault($eFUWm$proptypes))).bool,
    inputRegExp: (0, ($parcel$interopDefault($eFUWm$proptypes))).instanceOf(RegExp),
    password: (0, ($parcel$interopDefault($eFUWm$proptypes))).bool,
    handleOutputString: (0, ($parcel$interopDefault($eFUWm$proptypes))).func.isRequired
};
var $ef99b842007faef5$export$2e2bcd8739ae039 = $ef99b842007faef5$var$ReactIndividualCharacterInputBoxes;


//# sourceMappingURL=ReactIndividualCharacterInputBoxes.js.map
